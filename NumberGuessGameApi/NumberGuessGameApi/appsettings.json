{
  /*
   * Configuración para SQLite en lugar de SQL Server.
   * SQLite es más simple: no necesita servidor, la base de datos es un archivo.
   */

  // =================================================================
  // CADENA DE CONEXIÓN A SQLITE
  // =================================================================
  "ConnectionStrings": {
    /*
     * SQLite Connection String - MÁS SIMPLE que SQL Server
     * 
     * Data Source=NumberGuessGame.db
     * - Crea un archivo llamado "NumberGuessGame.db" en la carpeta del proyecto
     * - Contiene toda la base de datos en un solo archivo
     * - No necesita servidor corriendo
     * - Perfecto para desarrollo y presentaciones
     * 
     * Ubicación del archivo:
     * C:\Users\TuUsuario\source\repos\NumberGuessGameApi\NumberGuessGame.db
     * 
     * Para usar ruta absoluta:
     * "Data Source=C:\\MisProyectos\\NumberGuessGame.db"
     * 
     * Para base de datos en memoria (se borra al cerrar):
     * "Data Source=:memory:"
     */
    "DefaultConnection": "Data Source=NumberGuessGame.db"
  },

  // =================================================================
  // CONFIGURACIÓN DE LOGGING MEJORADA PARA AUDITORÍA
  // =================================================================
  "Logging": {
    /*
     * Configuración exhaustiva de logs para cumplir con el requisito
     * de "logs de procesamiento y auditoría"
     */
    "LogLevel": {
      // Nivel predeterminado: Information
      // Registra todos los eventos importantes del flujo de la aplicación
      "Default": "Information",

      // Framework de ASP.NET Core: Warning
      // Solo advertencias y errores del framework (reduce ruido)
      "Microsoft.AspNetCore": "Warning",

      // Entity Framework: Information
      // IMPORTANTE: Muestra las queries SQL generadas
      // Útil para auditoría y debugging
      "Microsoft.EntityFrameworkCore": "Information",

      // ⭐ NUEVO: Logging específico para nuestros servicios
      // Trace = Nivel más detallado, registra TODO
      "NumberGuessGameApi.Services.GameService": "Information",
      "NumberGuessGameApi.Controllers.GameController": "Information"
    },

    // ⭐ NUEVO: Configuración de providers de logging
    "Console": {
      /*
       * Configuración del logging en consola
       * Los logs aparecerán en la ventana de salida de Visual Studio
       */
      "IncludeScopes": true, // Incluye contexto de los logs
      "LogLevel": {
        "Default": "Information"
      }
    },

    "Debug": {
      /*
       * Configuración del logging en Debug
       * Los logs aparecen en la ventana de depuración
       */
      "LogLevel": {
        "Default": "Information"
      }
    }
  },

  // =================================================================
  // CONFIGURACIÓN PARA ARCHIVOS DE LOG (OPCIONAL)
  // =================================================================
  /*
   * Si quieres guardar logs en archivos (recomendado para auditoría),
   * descomenta esta sección y agrega el paquete Serilog:
   * Install-Package Serilog.AspNetCore
   * Install-Package Serilog.Sinks.File
   */
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information"
    },
    "WriteTo": [
      {
        "Name": "File",
        "Args": {
          "path": "Logs/api-log-.txt",
          "rollingInterval": "Day",
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      }
    ]
  },

  // =================================================================
  // HOSTS PERMITIDOS
  // =================================================================
  "AllowedHosts": "*",

  // =================================================================
  // CONFIGURACIONES PERSONALIZADAS DEL JUEGO
  // =================================================================
  "GameSettings": {
    "MaxAttempts": 100,
    "SecretNumberDigits": 4,
    "AllowDuplicateDigits": false,
    "EnableDetailedLogging": true // ⭐ NUEVO: Flag para logging detallado
  },

  // =================================================================
  // CONFIGURACIÓN POWER BI (para referencia)
  // =================================================================
  "PowerBI": {
    /*
     * Información para conectar Power BI a la base de datos SQLite
     * 
     * Para conectar Power BI a SQLite:
     * 1. En Power BI Desktop: Obtener datos → Más...
     * 2. Buscar: "SQLite"
     * 3. Si no aparece, instalar el driver ODBC de SQLite
     * 4. Seleccionar el archivo: NumberGuessGame.db
     * 5. Elegir tablas: Players, Games, Attempts
     */
    "DatabasePath": "NumberGuessGame.db",
    "Tables": [
      "Players",
      "Games",
      "Attempts"
    ],
    "Metrics": [
      "Usuarios registrados por día",
      "Top 5 juegos con menos intentos",
      "Cantidad de intentos por juego"
    ]
  }
}

/*
 * =================================================================
 * VENTAJAS DE SQLITE SOBRE SQL SERVER
 * =================================================================
 * 
 * ✅ No requiere instalación de servidor
 * ✅ Base de datos en un solo archivo portable
 * ✅ Más fácil de respaldar (solo copiar el archivo .db)
 * ✅ Más rápido para proyectos pequeños/medianos
 * ✅ Perfecto para demos y presentaciones
 * ✅ Menos configuración necesaria
 * ✅ Funciona en cualquier plataforma (Windows, Mac, Linux)
 * 
 * =================================================================
 * ESTRUCTURA DE LOGS PARA AUDITORÍA
 * =================================================================
 * 
 * Los logs incluirán:
 * 
 * 1. TIMESTAMP exacto de cada operación
 * 2. NIVEL del log (Information, Warning, Error)
 * 3. CONTEXTO (qué clase y método generó el log)
 * 4. DATOS relevantes (IDs, nombres, números de intento)
 * 5. RESULTADOS de operaciones
 * 6. ERRORES con stack trace completo
 * 
 * Ejemplo de log:
 * 2025-10-25 15:30:45.123 [INF] NumberGuessGameApi.Services.GameService
 *   Jugador registrado exitosamente: Juan Perez, PlayerId: 1
 * 
 * =================================================================
 * MÉTRICAS PARA POWER BI
 * =================================================================
 * 
 * El sistema genera automáticamente los datos necesarios para:
 * 
 * 1. Cantidad de usuarios registrados por día
 *    - Tabla: Players
 *    - Campo: RegistrationDate
 *    - Agregación: COUNT por fecha
 * 
 * 2. Top 5 juegos con menos intentos
 *    - Tablas: Games JOIN Attempts
 *    - Campo: COUNT(Attempts) WHERE IsFinished = true
 *    - Ordenar: ASC por cantidad
 *    - Límite: TOP 5
 * 
 * 3. Cantidad de intentos por juego
 *    - Tablas: Games JOIN Attempts
 *    - Campos: GameId, COUNT(AttemptId)
 *    - Agrupar: Por GameId
 */